!function(){"use strict";function e(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=n}var r,o;return r=t,(o=[{key:"_showInputError",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._inputErrorClass)}},{key:"toggleButton",value:function(){this._hasValidInput()?(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)):(this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass))}},{key:"_hasValidInput",value:function(){return this._inputList.every((function(e){return!0===e.validity.valid}))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListeners",value:function(){var t=this;this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList=e(this._form.querySelectorAll(this._inputSelector)),this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t.toggleButton()}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}},{key:"validateOnOpen",value:function(){var t=this;this._inputList=e(this._form.querySelectorAll(this._inputSelector)),this._inputList.forEach((function(e){t._checkInputValidity(e)}))}}])&&n(r.prototype,o),t}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleDeleteCard,c=t.handleLikeIcon;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=o.name,this._link=o.link,this._userId=o.owner._id,this._cardId=o._id,this._likes=o.likes,this._ownerId=r,this._handleCardClick=i,this._handleDeleteCard=a,this._handleLikeIcon=c,this._cardSelector=n}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick({link:e._link,name:e._name})})),this._element.querySelector(".card__like").addEventListener("click",(function(t){return e._handleLikeIcon(t,e)})),this._element.querySelector(".card__delete").addEventListener("click",(function(){return e._handleDeleteCard(e)})),this._setDeleteButton(),this._updateLikes()}},{key:"_setDeleteButton",value:function(){this._userId!==this._ownerId&&(this._element.querySelector(".card__delete").style.display="none")}},{key:"_updateLikes",value:function(){var e=this;this._element.querySelector(".card__like-counter").textContent=this._likes.length,this._likes.filter((function(t){return t._id===e._ownerId})).length>0&&this._element.querySelector(".card__like").classList.add("card__like_active")}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".card__image").style.backgroundImage="url(".concat(this._link,")"),this._element.querySelector(".card__title").textContent=this._name,this._element}},{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"setLikesInfo",value:function(e){this._likes=e.likes,this._updateLikes()}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this.items.forEach((function(t){return e._renderer(t)}))}},{key:"appendItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}}])&&a(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(".".concat(t)),this._handleEscUp=this._handleEscUp.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscUp",value:function(e){"Escape"==e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("close-button"))&&e.close()}))}},{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscUp)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscUp)}}])&&u(t.prototype,n),e}();function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=d(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function d(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function y(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._cardImage=t._popupElement.querySelector(".popup__preview-image"),t}return t=a,(n=[{key:"open",value:function(e){this._popupElement.querySelector(".popup__caption").textContent=e.name,this._cardImage.src=e.link,this._cardImage.alt="Preview of ".concat(e.name),f(m(a.prototype),"open",this).call(this)}}])&&p(t.prototype,n),a}(l);function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function E(e,t){return E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},E(e,t)}function S(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupForm=t._popupElement.querySelector(".popup__form"),t._handleFormSubmit=r,t._inputs=t._popupElement.querySelectorAll(".popup__input"),t._values={},t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputs.forEach((function(t){e._values[t.name]=t.value})),this._values}},{key:"renderLoading",value:function(e){this._popupForm.querySelector(".submit-button").textContent=e?"Saving...":"Create"}},{key:"setEventListeners",value:function(){var e=this;g(w(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){this._popupForm.reset(),g(w(a.prototype),"close",this).call(this)}}])&&b(t.prototype,n),a}(l);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t){var n=t.nameSelector,r=t.jobSelector,o=t.imageSelector,i=t.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(".".concat(n)),this._jobElement=document.querySelector(".".concat(r)),this._imageElement=document.querySelector(".".concat(o)),this._userId=i}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,image:this._imageElement.src,_id:this._userId}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.aboutMe,r=e._id;this._nameElement.textContent=t,this._jobElement.textContent=n,this._userId=r}},{key:"setUserAvatar",value:function(e){var t=e.link;this._imageElement.src=t}}])&&C(t.prototype,n),e}(),O={editFormElement:document.querySelector(".popup_type_edit").querySelector(".popup__form"),addFormElement:document.querySelector(".popup_type_add").querySelector(".popup__form"),editImageProfileFormElement:document.querySelector(".popup_type_profile-image").querySelector(".popup__form"),profileNameElement:document.querySelector(".profile__name"),profileJobElement:document.querySelector(".profile__about-me"),profileImageElement:document.querySelector(".profile__image"),profileImagePopupElement:document.querySelector(".popup__input_image_link"),profileNamePopupElement:document.querySelector(".popup__input_field_name"),profileJobPopupElement:document.querySelector(".popup__input_field_about-me")},L={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=t.baseUrl,this.token=t.token,this.groupId=t.groupId}var t,n;return t=e,(n=[{key:"getProfileInfo",value:function(){return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/users/me/"),{headers:{authorization:this.token,"Content-Type":"application/json"}}).then((function(e){return e.ok?(console.log("Data load correctly, code status: ".concat(e.status)),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"saveProfileInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/users/me"),{method:"PATCH",headers:{authorization:this.token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\ndata saved correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"saveProfileImage",value:function(e){var t=e.avatar;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this.token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\nimage saved correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"getCards",value:function(){return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/cards/"),{headers:{authorization:this.token,"Content-Type":"application/json"}}).then((function(e){return e.ok?(console.log("Data load correctly, code status: ".concat(e.status)),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"saveCards",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/cards"),{method:"POST",headers:{authorization:this.token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\ncard saved correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"deleteCards",value:function(e){var t=e.cardId;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/cards/").concat(t),{method:"DELETE",headers:{authorization:this.token,"Content-Type":"application/json"}}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\ncard deleted correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"likeCards",value:function(e){var t=e.cardId;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/cards/likes/").concat(t),{method:"PUT",headers:{authorization:this.token,"Content-Type":"application/json"}}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\ncard liked correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}},{key:"dislikeCards",value:function(e){var t=e.cardId;return fetch("".concat(this.baseUrl,"/").concat(this.groupId,"/cards/likes/").concat(t),{method:"DELETE",headers:{authorization:this.token,"Content-Type":"application/json"}}).then((function(e){return e.ok?(console.log("Code status: ".concat(e.status,",\ncard disliked correctly.")),e.json()):Promise.reject("Error: ".concat(e.status))}))}}])&&P(t.prototype,n),e}();function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(){return R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},R.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=D(e)););return e}function F(e,t){return F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},F(e,t)}function A(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function D(e){return D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},D(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=D(r);if(o){var n=D(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupForm=t._popupElement.querySelector(".popup__form"),t._handleFormSubmit=r,t}return t=a,(n=[{key:"renderLoading",value:function(e){this._popupForm.querySelector(".submit-button").textContent=e?"Deleting...":"Yes"}},{key:"setEventListeners",value:function(){var e=this;R(D(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(),e.close()}))}},{key:"close",value:function(){R(D(a.prototype),"close",this).call(this)}}])&&U(t.prototype,n),a}(l);function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var z=new c({renderer:function(e){Q(e)}},".cards-grid"),M=new _("popup_type_preview"),N=new j({nameSelector:"profile__name",jobSelector:"profile__about-me",imageSelector:"profile__image"}),J=new I({popupSelector:"popup_type_edit",handleFormSubmit:function(e){W.saveProfileInfo({name:e.name,about:e.aboutMe}).then((function(e){N.setUserInfo({name:e.name,aboutMe:e.about})})).then((function(){J.close()})).catch((function(e){console.log(e)}))}}),H=new I({popupSelector:"popup_type_add",handleFormSubmit:function(e){var t={name:e.title,link:e.link};W.saveCards({name:t.name,link:t.link}).then((function(e){Q(e,"newCard"),H.close()})).catch((function(e){console.log(e)}))}}),$=new I({popupSelector:"popup_type_profile-image",handleFormSubmit:function(e){W.saveProfileImage({avatar:e.link}).then((function(e){N.setUserAvatar({link:e.avatar}),$.close()})).catch((function(e){console.log(e)}))}}),Y=new r(L,O.editFormElement),G=new r(L,O.addFormElement),K=new r(L,O.editImageProfileFormElement),Q=function(e,t){var n=new i({data:e,handleCardClick:function(e){M.open(e)},handleDeleteCard:function(e){var t=new x({popupSelector:"popup_type_delete-card",handleFormSubmit:function(){n.removeCard(),W.deleteCards({cardId:e._cardId}).catch((function(e){console.log(e)})).finally((function(){t.renderLoading(!1)})),t.close()}});t.open(),t.setEventListeners()},handleLikeIcon:function(e,t){t._likes.some((function(e){return e._id===N._userId}))?W.dislikeCards({cardId:t._cardId}).then((function(e){n.setLikesInfo(e)})).catch((function(e){console.log(e)})):W.likeCards({cardId:t._cardId}).then((function(e){n.setLikesInfo(e)})).catch((function(e){console.log(e)})),e.target.classList.toggle("card__like_active")}},"#card-template",N._userId);return"newCard"===t?z.prependItem(n.generateCard()):z.appendItem(n.generateCard()),n};Y.enableValidation(),G.enableValidation(),K.enableValidation(),M.setEventListeners(),J.setEventListeners(),H.setEventListeners(),$.setEventListeners(),document.querySelector(".edit-button").addEventListener("click",(function(){var e=N.getUserInfo(),t=e.name,n=e.job;O.profileNamePopupElement.value=t,O.profileJobPopupElement.value=n,J.renderLoading(!1),Y.validateOnOpen(),J.open()})),document.querySelector(".add-button").addEventListener("click",(function(){H.renderLoading(!1),H.open(),G.toggleButton()})),document.querySelector(".profile__image-wrapper").addEventListener("click",(function(){var e=N.getUserInfo().image;O.profileImagePopupElement.value=e,$.renderLoading(!1),K.validateOnOpen(),$.open(),K.toggleButton()}));var W=new q({baseUrl:"https://around.nomoreparties.co/v1/",token:"d32f6df6-a478-44c7-98e2-39f20efb7fb4",groupId:"group-12"});Promise.all([W.getCards(),W.getProfileInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return V(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?V(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=i.name,c=i.about,u=i.avatar,l=i._id;N.setUserInfo({name:a,aboutMe:c,_id:l}),N.setUserAvatar({link:u}),z.items=o,z.renderItems()})).catch((function(e){console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,