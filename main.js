!function(){"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function n(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}var r,o;return r=n,(o=[{key:"_showInputError",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._inputErrorClass)}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._inputErrorClass)}},{key:"toggleButton",value:function(){this._hasValidInput()?(this._submitButton.disabled=!1,this._submitButton.classList.remove(this._inactiveButtonClass)):(this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass))}},{key:"_hasValidInput",value:function(){return this._inputList.every((function(e){return!0===e.validity.valid}))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListeners",value:function(){var t,n=this;this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList=function(t){if(Array.isArray(t))return e(t)}(t=this._form.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._inputList.forEach((function(e){e.addEventListener("input",(function(){n._checkInputValidity(e),n.toggleButton()}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}},{key:"resetValidation",value:function(){var e=this;this.toggleButton(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&t(r.prototype,o),n}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleDeleteCard,u=t.handleLikeIcon;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=o.name,this._link=o.link,this._userId=o.owner._id,this._cardId=o._id,this._likes=o.likes,this._ownerId=r,this._handleCardClick=i,this._handleDeleteCard=a,this._handleLikeIcon=u,this._cardSelector=n}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick({link:e._link,name:e._name})})),this._likeElement.addEventListener("click",(function(){return e._handleLikeIcon(e)})),this._element.querySelector(".card__delete").addEventListener("click",(function(){return e._handleDeleteCard(e)}))}},{key:"_setDeleteButton",value:function(){this._userId!==this._ownerId&&(this._element.querySelector(".card__delete").style.display="none")}},{key:"_updateLikes",value:function(){var e=this;this._element.querySelector(".card__like-counter").textContent=this._likes.length,this._likes.filter((function(t){return t._id===e._ownerId})).length>0&&this._likeElement.classList.add("card__like_active")}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._likeElement=this._element.querySelector(".card__like"),this._setEventListeners(),this._setDeleteButton(),this._updateLikes(),this._element.querySelector(".card__image").style.backgroundImage="url(".concat(this._link,")"),this._element.querySelector(".card__title").textContent=this._name,this._element}},{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"setLikesInfo",value:function(e){this._likeElement.classList.toggle("card__like_active"),this._likes=e.likes,this._updateLikes()}}])&&r(t.prototype,n),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this.items.forEach((function(t){return e._renderer(t)}))}},{key:"appendItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}}])&&i(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(".".concat(t)),this._handleEscUp=this._handleEscUp.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscUp",value:function(e){"Escape"==e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("close-button"))&&e.close()}))}},{key:"open",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscUp)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscUp)}}])&&u(t.prototype,n),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=p(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function p(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function h(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._cardImage=t._popupElement.querySelector(".popup__preview-image"),t._popupCaption=t._popupElement.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e){this._popupCaption.textContent=e.name,this._cardImage.src=e.link,this._cardImage.alt="Preview of ".concat(e.name),f(m(a.prototype),"open",this).call(this)}}])&&s(t.prototype,n),a}(c);function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function k(e,t){return k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},k(e,t)}function E(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupForm=t._popupElement.querySelector(".popup__form"),t._submitButton=t._popupForm.querySelector(".submit-button"),t._inputs=t._popupElement.querySelectorAll(".popup__input"),t._handleFormSubmit=r,t._values={},t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputs.forEach((function(t){e._values[t.name]=t.value})),this._values}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Saving...":"Create"}},{key:"setEventListeners",value:function(){var e=this;b(S(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(e._getInputValues())}))}},{key:"close",value:function(){this._popupForm.reset(),b(S(a.prototype),"close",this).call(this)}}])&&v(t.prototype,n),a}(c);function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=t.nameSelector,r=t.jobSelector,o=t.imageSelector,i=t.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=document.querySelector(".".concat(n)),this._jobElement=document.querySelector(".".concat(r)),this._imageElement=document.querySelector(".".concat(o)),this._userId=i}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,image:this._imageElement.src,_id:this._userId}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.aboutMe,r=e.avatar,o=e._id;this._nameElement.textContent=t,this._jobElement.textContent=n,this._imageElement.src=r,this._userId=o}},{key:"setUserAvatar",value:function(e){var t=e.link;this._imageElement.src=t}}])&&I(t.prototype,n),e}(),L={editFormElement:document.querySelector(".popup_type_edit").querySelector(".popup__form"),addFormElement:document.querySelector(".popup_type_add").querySelector(".popup__form"),editImageProfileFormElement:document.querySelector(".popup_type_profile-image").querySelector(".popup__form"),profileNameElement:document.querySelector(".profile__name"),profileJobElement:document.querySelector(".profile__about-me"),profileImageElement:document.querySelector(".profile__image"),profileImagePopupElement:document.querySelector(".popup__input_image_link"),profileNamePopupElement:document.querySelector(".popup__input_field_name"),profileJobPopupElement:document.querySelector(".popup__input_field_about-me")};function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._groupId=t.groupId,this._header=t.header}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?(console.log("URL: ".concat(e.url,"\nStatus: ").concat(e.statusText,"\nStatus code: ").concat(e.status)),e.json()):Promise.reject("Error: ".concat(e.status))}},{key:"getProfileInfo",value:function(){return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/users/me/"),{headers:this._header}).then(this._checkResponse)}},{key:"saveProfileInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/users/me"),{method:"PATCH",headers:this._header,body:JSON.stringify({name:t,about:n})}).then(this._checkResponse)}},{key:"saveProfileImage",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/users/me/avatar"),{method:"PATCH",headers:this._header,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}},{key:"getCards",value:function(){return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/cards/"),{headers:this._header}).then(this._checkResponse)}},{key:"saveCards",value:function(e){var t=e.name,n=e.imageLink;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/cards"),{method:"POST",headers:this._header,body:JSON.stringify({name:t,link:n})}).then(this._checkResponse)}},{key:"deleteCards",value:function(e){var t=e.cardId;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/cards/").concat(t),{method:"DELETE",headers:this._header}).then(this._checkResponse)}},{key:"likeCards",value:function(e){var t=e.cardId;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/cards/likes/").concat(t),{method:"PUT",headers:this._header}).then(this._checkResponse)}},{key:"dislikeCards",value:function(e){var t=e.cardId;return fetch("".concat(this._baseUrl,"/").concat(this._groupId,"/cards/likes/").concat(t),{method:"DELETE",headers:this._header}).then(this._checkResponse)}}])&&O(t.prototype,n),e}(),P=j;function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=U(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},B.apply(this,arguments)}function U(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=F(e)););return e}function A(e,t){return A=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},A(e,t)}function T(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function F(e){return F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},F(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&A(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=F(r);if(o){var n=F(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupForm=t._popupElement.querySelector(".popup__form"),t._submitButton=t._popupForm.querySelector(".submit-button"),t._handleFormSubmit=r,t}return t=a,(n=[{key:"setSubmitAction",value:function(e){this._handleFormSubmit=e}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Deleting...":"Yes"}},{key:"setEventListeners",value:function(){var e=this;B(F(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit()}))}}])&&R(t.prototype,n),a}(c);function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var V,M=new a({renderer:function(e){var t=K(e).generateCard();M.appendItem(t)}},".cards-grid"),N=new _("popup_type_preview"),J=new C({nameSelector:"profile__name",jobSelector:"profile__about-me",imageSelector:"profile__image"}),H=new w({popupSelector:"popup_type_edit",handleFormSubmit:function(e){Q.saveProfileInfo({name:e.name,about:e.aboutMe}).then((function(e){J.setUserInfo({name:e.name,aboutMe:e.about,avatar:e.avatar}),H.close()})).catch((function(e){console.log(e)})).finally((function(){H.renderLoading(!1)}))}}),$=new w({popupSelector:"popup_type_add",handleFormSubmit:function(e){var t={name:e.title,link:e.link};Q.saveCards({name:t.name,imageLink:t.link}).then((function(e){var t=K(e).generateCard();M.prependItem(t),$.close()})).catch((function(e){console.log(e)})).finally((function(){$.renderLoading(!1)}))}}),z=new w({popupSelector:"popup_type_profile-image",handleFormSubmit:function(e){Q.saveProfileImage({avatar:e.link}).then((function(e){J.setUserAvatar({link:e.avatar}),z.close()})).catch((function(e){console.log(e)})).finally((function(){z.renderLoading(!1)}))}}),Y=new x({popupSelector:"popup_type_delete-card"}),G={};V={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible",formSelector:".popup__form"},Array.from(document.querySelectorAll(V.formSelector)).forEach((function(e){var t=new n(V,e),r=e.getAttribute("name");G[r]=t,t.enableValidation()}));var K=function(e){var t=new o({data:e,handleCardClick:function(e){N.open(e)},handleDeleteCard:function(e){var n=e._cardId;Y.open(),Y.setSubmitAction((function(){Q.deleteCards({cardId:n}).then((function(){t.removeCard(),Y.close()})).catch((function(e){console.log(e)})).finally((function(){Y.renderLoading(!1)}))}))},handleLikeIcon:function(e){e._likes.some((function(e){return e._id===J._userId}))?Q.dislikeCards({cardId:e._cardId}).then((function(e){t.setLikesInfo(e)})).catch((function(e){console.log(e)})):Q.likeCards({cardId:e._cardId}).then((function(e){t.setLikesInfo(e)})).catch((function(e){console.log(e)}))}},"#card-template",J._userId);return t};N.setEventListeners(),H.setEventListeners(),$.setEventListeners(),z.setEventListeners(),Y.setEventListeners(),document.querySelector(".edit-button").addEventListener("click",(function(){var e=J.getUserInfo(),t=e.name,n=e.job;L.profileNamePopupElement.value=t,L.profileJobPopupElement.value=n,G[L.editFormElement.getAttribute("name")].resetValidation(),H.open()})),document.querySelector(".add-button").addEventListener("click",(function(){G[L.addFormElement.getAttribute("name")].resetValidation(),$.open()})),document.querySelector(".profile__image-wrapper").addEventListener("click",(function(){var e=J.getUserInfo().image;L.profileImagePopupElement.value=e,G[L.editImageProfileFormElement.getAttribute("name")].resetValidation(),z.open()}));var Q=new P({baseUrl:"https://around.nomoreparties.co/v1",groupId:"group-12",header:{authorization:"d32f6df6-a478-44c7-98e2-39f20efb7fb4","Content-Type":"application/json"}});Promise.all([Q.getCards(),Q.getProfileInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=i.name,u=i.about,c=i.avatar,l=i._id;J.setUserInfo({name:a,aboutMe:u,avatar:c,_id:l}),M.items=o,M.renderItems()})).catch((function(e){console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,